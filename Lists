% P1
my_last(X,[X]).
my_last(X,[_|T]):-my_last(X,T).

% P2
my_last(X,[X,_]).
my_last(X,[_|T]):-my_last(X,T).

% P3
element_at(H,[H|_],1).
element_at(X,[_|T],N):- M is N-1, element_at(X,T,M).

% P4
nr_elem([],0).
nr_elem([_|T],N):- nr_elem(T,M), N is M+1.

% P5
rev([],[]).
rev([H|T],L):- rev(T,S), append(S,[H],L).
%append (L1,L2,L3) => L3=L1+L2

% P6
rev([],[]).
rev([H|T],L):- rev(T,S), append(S,[H],L).
palindrome(L):- rev(L,R), L==R.
% from stackoverflow
% The = "operator" is actually a predicate that succeeds when the two terms are unified.
% Thus X = 2 or 2 = X amount to the same thing, a goal to unify X with 2.
% The == "operator" differs in that it succeeds only if the two terms are already identical without further unification. 
% Thus X == 2 is true only if the variable X had previously been assigned the value 2.

% P7
flat(H,Y):- is_list(H), flatten(H,Y).
flat(H,[H]). 
flatten([],[]).
flatten([H|T],X):- flat(H,Y), flatten(T,Z), append(Y,Z,X).
% cred ca mi-a luat o ora+ pana mi-am dat seama de asta :(

my_flatten([],[]).
my_flatten([H|T],Z):- is_list(H), my_flatten(H,X), my_flatten(T,Y), append(X,Y,Z).
my_flatten([H|T],[H|Y]):- my_flatten(T,Y).
% updated

% P8 Eliminate consecutive duplicates of list elements.
compress([X],[X]).
compress([H|T],X):- member(H,T), compress(T,X).
compress([H|T],X):- compress(T,Y), append([H],Y,X).
%this solution changes the order of elements so it is not good

remove(_,[],[]).
remove(E,[H|T],R):- E==H, remove(E,T,R).
remove(E,[H|T],X):- remove(E,T,R), append([H],R,X).
compress([],[]).
compress([H|T],X):- remove(H,T,Y), compress(Y,Z), append([H],Z,X).
%that s the right one

remove(_,[],[]).
remove(E,[H|T],R):- E==H, remove(E,T,R).
remove(E,[H|T],[H|R]):- remove(E,T,R).
compress([],[]).
compress([H|T],[H|X]):- remove(H,T,Y), compress(Y,X).
%and this is more elegant without append

get_first([H|_],H).
compress([X],[X]).
compress([H|T],[H|L]):- get_first(T,K), K\=H, compress(T,L). 
compress([_|T],L):- compress(T,L).
% updated, the previous were wrong

% P9 Pack consecutive duplicates of list elements into sublists.
make_list(_,[],[],[]).
make_list(E,[H|T],[H|X],R):- H==E, make_list(E,T,X,R).
make_list(_,[H|T],[],[R|Z]):- pack([H|T],Y),append([],Y,Z).
pack([],[]).
pack([H|T],[Y|R]):- make_list(H,[H|T],Y,R).
%este insane, am facut random chestia asta care aproape merge

make_list(_,[],[],[]).
make_list(E,[H|T],[H|X],L):- H==E, make_list(E,T,X,L).
make_list(_,[H|T],[],[H|T]).
pack([],[]).
pack([H|T],[Y|Z]):- make_list(H,[H|T],Y,L),pack(L,Z).
% o solutie corecta

make_list(_,[],[],[]).
make_list(E,[H|T],[H|X],L):- H==E, make_list(E,T,X,L).
make_list(_,[H|T],[],[H|T]).
pack([],[]).
pack([H|T],X):- make_list(H,[H|T],Y,L),pack(L,Z),append([Y],Z,X).
% o alternatva corecta cu append (foarte interesant ca trb sa fii atent la listele de liste,
% paractic in exemplu anterior a mers pt ca puneam o lista in locul elementului head, presupun)
% banuiesc ca exista si o solutie mai eleganta, dar atat am putut :))

split_list([H|T],H,T).
check(H,[H|_]).
do_append(X,L,[Y|T]):- split_list(L,H,T), check(X,H), append(H,[X],Y).
do_append(X,L,[[X]|L]).
pack([],[]).
pack([H|T],R):- pack(T,L), do_append(H,L,R).
% updated

% P10 Run-length encoding of a list. ?- encode([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).   X = [[4,a],[1,b],[2,c],[2,a],[1,d][4,e]]
letter([H|_],H). 
count([],[]).
count([H|T],X):- count(T,R),length(H,N),letter(H,L),append([[N,L]],R,X) .
encode(L,R):- pack(L,E), count(E,R). 

letter([H|_],H). 
count([],[]).
count([H|T],[[N,L]|R]):- length(H,N),letter(H,L),count(T,R) .
encode(L,R):- pack(L,E), count(E,R). 
%alternativa fara append

get_first([H|_],H).
count([],0).
count([_|T],N):- count(T,M), N is M+1.
iterate([],[]).
iterate([H|T],[[N,X]|R]):- iterate(T,R), count(H,N), get_first(H,X).
encode(L,R):- pack(L,P), iterate(P,R).
% updated


% P11 Modified run-length encoding.
letter([H|_],H). 
count([],[]).
count([H|T],[[N,L]|R]):- length(H,N),letter(H,L), N\==1, count(T,R).
count([H|T],[L|R]):- length(H,N),letter(H,L), N==1, count(T,R).
encode_modified(L,R):- pack(L,E), count(E,R). 

% P12 Decode a run-length encoded list.
decode_element([0,_],[]).
decode_element([N,E],[E|X]):-M is N-1,decode_element([M,E],X).
decode_list([],[]).
decode_list([H|T],[R|X]):- is_list(H),decode_element(H,R),decode_list(T,X).
decode_list([H|T],[H|X]):- decode_list(T,X). 
%this decodes the list but the list is still segmented

decode_element([0,_],[]).
decode_element([N,E],[E|X]):-M is N-1,decode_element([M,E],X).
decode_list([],[]).
decode_list([H|T],Y):- is_list(H),decode_element(H,R),decode_list(T,X),append(R,X,Y).
decode_list([H|T],[H|X]):- decode_list(T,X). 
%problem solved with append

% P13 
iterate([],[[N,C]],C,N).
iterate([H|T],R,C,N):- H==C, M is N+1, iterate(T,R,C,M).
iterate([H|T],[[N,C]|R],C,N):- iterate([H|T],R,H,0).    
encode_direct([H|T],R):- iterate([H|T],R,H,0).
% updated

% P14
duplicate(H,[H,H]).
dupli([],[]).
dupli([H|T],X):- duplicate(H,D), dupli(T,Y), append(D,Y,X). 

dupli([],[]).
dupli([H|T],[H,H|X]):- dupli(T,X). 
% shorter

% P15
duplicate(_,0,[]).
duplicate(H,N,[H|X]):- M is N-1,duplicate(H,M,X).
dupli([],_,[]).
dupli([H|T],N,X):- duplicate(H,N,D), dupli(T,N,Y), append(D,Y,X). 

% P16
drop_count([],_,_,[]).
drop_count([H|T],I,N,[H|X]):- M is I mod N, M\==0,J is I+1,drop_count(T,J,N,X).
drop_count([_|T],I,N,X):- J is I+1,drop_count(T,J,N,X).
drop(L,N,X):-drop_count(L,1,N,X).

iterate([],_,_,[]).
iterate([H|T],N,C,[H|R]):- C\=N, M is C+1, iterate(T,N,M,R).
iterate([_|T],N,_,R):- iterate(T,N,1,R).
drop(L,N,R):- iterate(L,N,1,R).
% updated

% P17
split([],_,[],[]).
split([H|T],0,L1,[H|L2]):- split(T,0,L1,L2).
split([H|T],N,[H|L1],L2):- M is N-1, split(T,M,L1,L2).

% P18
slice_count([],_,_,_,[]).
slice_count([H|T],I,A,B,[H|X]):- I >= A, I =< B, J is I+1, slice_count(T,J,A,B,X). 
slice_count([_|T],I,A,B,X):- J is I+1, slice_count(T,J,A,B,X). 
slice(L,A,B,X):- slice_count(L,1,A,B,X).

iterate([H|_],R,_,R,[H]).
iterate([_|T],N,L,R,X):- N<L, M is N+1, iterate(T,M,L,R,X).
iterate([H|T],N,L,R,[H|X]):- M is N+1, iterate(T,M,L,R,X).
slice(Y,L,R,X):- iterate(Y,1,L,R,X).
% updated

% P19
get_factor(_,N,N):- N>=0.
get_factor(L,N,M):- length(L,X), M is X+N.
split(T,0,T,[]).
split([H|T],N,L1,[H|L2]):- M is N-1, split(T,M,L1,L2).
rotate(L,N,X):- get_factor(L,N,M), split(L,M,L1,L2), append(L1,L2,X).
% updated

% P20
iterate(_,[],_,_,[]).
iterate(X,[H|T],P,I,[H|R]):- P \== I, J is I+1,iterate(X,T,P,J,R).
iterate(H,[H|T],P,I,R):- J is I+1,iterate(H,T,P,J,R).
remove_at(X,L,P,R):- iterate(X,L,P,1,R).

remove_at(H,[H|T],1,T).
remove_at(X,[H|T],N,[H|R]):- M is N-1, remove_at(X,T,M,R).
% updated

% P21
iterate(_,[],_,_,[]).
iterate(X,[H|T],P,I,[H|R]):- P \== I, J is I+1,iterate(X,T,P,J,R).
iterate(X,[H|T],P,I,[X,H|R]):- J is I+1,iterate(X,T,P,J,R).
insert_at(X,L,P,R):- iterate(X,L,P,1,R).

% P22 Create a list containing all integers within a given range.
iterate(_,B,B,[B]).
iterate(A,B,I,[I|L]):- J is I+1,iterate(A,B,J,L).
range(A,B,L):- iterate(A,B,A,L).

% P23 Extract a given number of randomly selected elements from a list.
iterate(_,[],_,_,[]).
iterate(X,[H|T],P,I,[H|R]):- P \== I, J is I+1,iterate(X,T,P,J,R).
iterate(H,[H|T],P,I,R):- J is I+1,iterate(H,T,P,J,R).
remove_at(X,L,P,R):- iterate(X,L,P,1,R).
rnd_select(_,0,[]).
rnd_select(L,N,[X|U]):- length(L,LEN), LIM is LEN+1, random(1,LIM,P), remove_at(X,L,P,T), M is N-1, rnd_select(T,M,U). 

% P24
lotto(N,M,L):- range(1,M,R), rnd_select(R,N,L).

% P25
rnd_permu(L,R):- length(L,LEN), rnd_select(L,LEN,R).
